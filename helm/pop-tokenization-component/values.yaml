global:
  # Variables that are used to build env vars for the specific environment
  vars:
    ENV_NAME: "dev"
    BASE_DB_URL: "Dummy variable"
    BASE_DB_OPTS: "usessl=true&sslmode=require"
    BASE_DB_USER: "postgres"
    BASE_DB_PASS: "H7^^#lgs0UM#XJYEgEinbETh1cvYf^p#rhoxvnJOg%nK78LDJ8B65Tr52EZUM60a"

    BASE_REDIS_HOST: "x-k8s-redis-headless"
    BASE_REDIS_USER: "default"
    BASE_REDIS_PASS: "pjLid42E8V41"
  # Env variables that are applied to every service
  env:
    AWS_REGION: "eu-central-1"

tokenization-component:
  enabled: true
  appId: tokenization-component
  externalsecretEnv:
    enabled: true
    env:
    - name: DATASOURCE_USERNAME
      key: "Dummy variable" 
      property: username
    - name: DATASOURCE_PASSWORD
      key: "Dummy variable"
      property: password
  cm:
    enabled: true
    env:
      APPLICATION_PORT: 8080
      JAVA_OPTS: " -XX:MaxDirectMemorySize=10M -Xmx887884K -XX:MaxMetaspaceSize=172979K -XX:ReservedCodeCacheSize=240M -Xss1M -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -Djava.rmi.server.hostname=localhost -Dcom.sun.management.jmxremote.port=8180 -Dcom.sun.management.jmxremote.rmi.port=8180 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
      LIQUIBASE_CONTEXT: "consistent_token_build"
      SPRING_PROFILES_ACTIVE: "prod"
    dynamic:
      DATASOURCE_DB_URL: "jdbc:postgresql://{{ .Values.global.vars.BASE_DB_URL }}:5432/postgres?{{ .Values.global.vars.BASE_DB_OPTS }}"

      REGION_NAME: "{{ .Values.global.env.AWS_REGION }}"
      AWS_REGION: "{{ .Values.global.env.AWS_REGION }}"
      AWS_DEFAULT_REGION: "{{ .Values.global.env.AWS_REGION }}"

      REDIS_HOST: "{{ .Values.global.vars.BASE_REDIS_HOST }}"
      REDIS_PORT: "6379"
      REDIS_USE_SSL: "false"
      REDIS_USERNAME: "{{ .Values.global.vars.BASE_REDIS_USER }}"
      REDIS_PASSWORD: "{{ .Values.global.vars.BASE_REDIS_PASS }}"

  ingress:
    enabled: true
    annotations:
      alb.ingress.kubernetes.io/actions.response-503: |
        {"type":"fixed-response","fixedResponseConfig":{"contentType":"text/plain","statusCode":"503","messageBody":"503 Service Unavailable"}}
      alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig":
        { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
      alb.ingress.kubernetes.io/group.name: public
      alb.ingress.kubernetes.io/healthcheck-path: /
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/success-codes: 200-404
      alb.ingress.kubernetes.io/target-type: ip
      kubernetes.io/ingress.class: alb
    dynamic:
      enabled: true
      nsPrefix: false
      tls: true
      baseDomain: dev.pop.qaiware.org
      cfgs:
      - name: tokenization-component
        paths:
          - /
        port: 80

  service:
    enabled: true
    external: false
    ports:
    - name: application
      port: 80
      protocol: TCP
      targetPort: application

  serviceAccount:
    enabled: false
    name: "aurora-tc-irsa"
    annotations: {}

  deployment:
    enabled: true

    serviceAccountName:
      enabled: false
      name: "aurora-tc-irsa"

    replicaCount: 1

    image:
      pullSecret:
        enabled: false
        secretName: "-"

      repository: "tokenization-component"
      tag: "master-consistent_tokens-kms-099912c5"
      pullPolicy: "Always"

    securityContext:
      enabled: true
      runAsUser: 1000
      fsGroup: 999

    ports:
    - name: application
      containerPort: 8080
      protocol: TCP

    resources:
      enabled: true
      requests:
        memory: 512Mi
        cpu: 50m
      limits:
        memory: 1536Mi
        cpu: 2

    probes:
      enabled: true
      content:
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 20
          timeoutSeconds: 5
          periodSeconds: 10
          failureThreshold: 20

        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 5
          periodSeconds: 60
          failureThreshold: 2

        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 5
          periodSeconds: 60
          failureThreshold: 2

  jobs:
    - name: "liquibase-migrate"
      restartPolicy: Never
      serviceAccount:
        enabled: false
        name: ""
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
      image:
        ecr: "082127478945.dkr.ecr.eu-central-1.amazonaws.com"
        repository: "tokenization-component-liquibase"
        tag: "master-099912c5"
      command:
        override: false
        args: []
      env: {}
      envFromCM: true
      externalsecretEnv:
        enabled: true
        env:
        - name: BASE_DB_USER
          key: "Dummy variable"
          property: username
        - name: BASE_DB_PASS
          key: "Dummy variable"
          property: password

      volumes:
        cm: []
